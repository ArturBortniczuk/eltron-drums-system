// src/App.js - Przywrócona wersja
import React, { useState, useEffect, useCallback, Suspense } from 'react';
import { authAPI } from './utils/api';
import './App.css';

// Lazy load components for better performance
const Navbar = React.lazy(() => import('./components/Navbar'));
const AdminNavbar = React.lazy(() => import('./components/AdminNavbar'));
const LoginForm = React.lazy(() => import('./components/LoginForm'));
const Dashboard = React.lazy(() => import('./components/Dashboard'));
const DrumsList = React.lazy(() => import('./components/DrumsList'));
const ReturnForm = React.lazy(() => import('./components/ReturnForm'));
const AdminDashboard = React.lazy(() => import('./components/AdminDashboard'));
const AdminClientsList = React.lazy(() => import('./components/AdminClientsList'));
const AdminReturnPeriodsManager = React.lazy(() => import('./components/AdminReturnPeriodsManager'));
const AdminDrumsList = React.lazy(() => import('./components/AdminDrumsList'));
const AdminReturnRequests = React.lazy(() => import('./components/AdminReturnRequests'));
const AdminReports = React.lazy(() => import('./components/AdminReports'));

// Loading component
const LoadingSpinner = ({ message = "Ładowanie..." }) => (
  <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-blue-100">
    <div className="text-center">
      <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
      <p className="text-gray-600 font-medium">{message}</p>
    </div>
  </div>
);

// Error Boundary Component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('App Error Boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 via-white to-red-100">
          <div className="text-center max-w-md">
            <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <span className="text-3xl">⚠️</span>
            </div>
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Wystąpił błąd aplikacji</h1>
            <p className="text-gray-600 mb-6">
              Aplikacja napotkała nieoczekiwany błąd. Spróbuj odświeżyć stronę.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors duration-200"
            >
              Odśwież stronę
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

const App = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [currentView, setCurrentView] = useState('login');
  const [selectedDrum, setSelectedDrum] = useState(null);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [navigationData, setNavigationData] = useState(null);
  const [appInitialized, setAppInitialized] = useState(false);
  const [initError, setInitError] = useState(null);

  useEffect(() => {
    const initializeApp = async () => {
      try {
        const user = authAPI.getCurrentUser();
        if (user && authAPI.isAuthenticated()) {
          setCurrentUser(user);
          const defaultView = (user.role === 'admin' || user.role === 'supervisor') 
            ? 'admin-dashboard' 
            : 'dashboard';
          setCurrentView(defaultView);
        } else {
          setCurrentView('login');
          setSidebarOpen(false);
        }
        setAppInitialized(true);
      } catch (error) {
        setInitError(error.message || 'Błąd inicjalizacji aplikacji');
        setAppInitialized(true);
      }
    };
    initializeApp();
  }, []);

  const logout = useCallback(() => {
    authAPI.logout();
    setCurrentUser(null);
    setCurrentView('login');
    setSidebarOpen(false);
    setSelectedDrum(null);
    setNavigationData(null);
  }, []);

  const navigateTo = useCallback((view, data = null) => {
    setCurrentView(view);
    if (data) {
      if (data.drum) setSelectedDrum(data.drum);
      if (data.navigationData) setNavigationData(data.navigationData);
      if (data && typeof data === 'object' && data.KOD_BEBNA) {
        setSelectedDrum(data);
      }
    }
    if (window.innerWidth < 1024) {
      setSidebarOpen(false);
    }
  }, []);

  const handleLogin = useCallback((user) => {
    setCurrentUser(user);
    setSidebarOpen(true);
    const defaultView = (user.role === 'admin' || user.role === 'supervisor') 
      ? 'admin-dashboard' 
      : 'dashboard';
    setCurrentView(defaultView);
  }, []);

  const isAdmin = currentUser && (currentUser.role === 'admin' || currentUser.role === 'supervisor');

  if (!appInitialized) {
    return <LoadingSpinner message="Inicjalizacja aplikacji..." />;
  }

  if (initError) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 via-white to-red-100">
        {/* ... Error content ... */}
      </div>
    );
  }

  const renderView = () => {
    switch (currentView) {
      case 'dashboard': return <Dashboard user={currentUser} onNavigate={navigateTo} />;
      case 'drums': return <DrumsList user={currentUser} onNavigate={navigateTo} />;
      case 'return': return (
        <ReturnForm 
          user={currentUser}
          selectedDrum={selectedDrum}
          onNavigate={navigateTo}
          onSubmit={() => {
            alert('✅ Zgłoszenie zwrotu zostało wysłane!');
            navigateTo('dashboard');
          }}
        />
      );
      case 'admin-dashboard': return <AdminDashboard user={currentUser} onNavigate={navigateTo} />;
      case 'admin-clients': return <AdminClientsList user={currentUser} onNavigate={navigateTo} initialFilter={navigationData} />;
      case 'admin-drums': return <AdminDrumsList user={currentUser} onNavigate={navigateTo} initialFilter={navigationData} />;
      case 'admin-returns': return <AdminReturnRequests user={currentUser} onNavigate={navigateTo} initialFilter={navigationData} />;
      case 'admin-reports': return <AdminReports user={currentUser} onNavigate={navigateTo} />;
      case 'admin-return-periods': return <AdminReturnPeriodsManager user={currentUser} onNavigate={navigateTo} />;
      default: return (
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Strona nie znaleziona</h2>
            <p className="text-gray-600 mb-6">Strona "{currentView}" nie istnieje.</p>
            <button
              onClick={() => navigateTo(isAdmin ? 'admin-dashboard' : 'dashboard')}
              className="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors duration-200"
            >
              Wróć do głównej strony
            </button>
          </div>
        </div>
      );
    }
  };

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100">
        {currentUser && (
          <Suspense fallback={<LoadingSpinner message="Ładowanie nawigacji..." />}>
            {isAdmin ? (
              <AdminNavbar 
                user={currentUser}
                currentView={currentView}
                sidebarOpen={sidebarOpen}
                setSidebarOpen={setSidebarOpen}
                onNavigate={navigateTo}
                onLogout={logout}
              />
            ) : (
              <Navbar 
                user={currentUser}
                currentView={currentView}
                sidebarOpen={sidebarOpen}
                setSidebarOpen={setSidebarOpen}
                onNavigate={navigateTo}
                onLogout={logout}
              />
            )}
          </Suspense>
        )}
        
        <main className={`
          transition-all duration-300 
          ${currentUser ? 'pt-16' : ''} 
          ${sidebarOpen && currentUser ? 'lg:pl-80' : ''}
        `}>
          <Suspense fallback={<LoadingSpinner message="Ładowanie strony..." />}>
            {currentView === 'login' ? (
              <LoginForm onLogin={handleLogin} />
            ) : (
              <div className="p-4 sm:p-6 lg:p-8">
                {renderView()}
              </div>
            )}
          </Suspense>
        </main>
      </div>
    </ErrorBoundary>
  );
};
